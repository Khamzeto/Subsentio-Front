'use client';
import React, { useState, useEffect } from 'react';
import {
  Select,
  SelectItem,
  Input,
  Button,
  Modal,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalFooter,
} from '@nextui-org/react';
import { useRouter } from 'next/navigation';
import $api from '@/config/api/api'; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
import useProfileStore from '@/components/store/useProfileStore';
import useLanguageStore from '@/components/store/useLanguageStore';
import { useTranslation } from 'react-i18next';

const nativeLanguageMap: Record<string, string> = {
  en: 'English',
  ru: '–†—É—Å—Å–∫–∏–π',
  es: 'Espa√±ol',
  fr: 'Fran√ßais',
  de: 'Deutsch',
  it: 'Italiano',
  pt: 'Portugu√™s',
  ar: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', // –ê—Ä–∞–±—Å–∫–∏–π —è–∑—ã–∫
  ja: 'Êó•Êú¨Ë™û', // –Ø–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫
  zh: '‰∏≠Êñá', // –ö–∏—Ç–∞–π—Å–∫–∏–π —è–∑—ã–∫
};

const learningLanguageMap: Record<string, string> = {
  en: 'English',
  ru: '–†—É—Å—Å–∫–∏–π',
  es: 'Espa√±ol',
  fr: 'Fran√ßais',
  de: 'Deutsch',
  it: 'Italiano',
  pt: 'Portugu√™s',
  ar: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', // –ê—Ä–∞–±—Å–∫–∏–π —è–∑—ã–∫
};

const emojis = ['üòä', 'üòé', 'üê£', 'üåü', 'üî•', 'üéâ', 'üíé', 'ü¶Ñ'];

type Props = {
  initialLang: string;
};

const EditProfilePage = ({ initialLang }: Props) => {
  const { t, i18n } = useTranslation();
  // –ë–µ—Ä—ë–º –º–µ—Ç–æ–¥—ã –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–∞—à–µ–≥–æ Store
  const { profile, fetchProfile, updateProfile } = useProfileStore();
  const [formData, setFormData] = useState({
    username: '',
    email: '',
    learningLanguage: '',
    nativeLanguage: '',
    seeTranslate: false,
    dayWords: 20,
    avatar: '',
  });

  // –°—Ç–µ–π—Ç –¥–ª—è —Ñ–æ—Ä–º—ã —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
  const [passwordData, setPasswordData] = useState({
    currentPassword: '',
    newPassword: '',
    confirmNewPassword: '',
  });

  const [saving, setSaving] = useState(false); // –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  const [isAvatarModalOpen, setIsAvatarModalOpen] = useState(false);
  const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false);
  const [isPasswordModalOpen, setIsPasswordModalOpen] = useState(false);

  const router = useRouter();

  // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
  useEffect(() => {
    fetchProfile();
  }, [fetchProfile]);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ i18n
  useEffect(() => {
    if (i18n.language !== initialLang) {
      i18n.changeLanguage(initialLang);
    }
  }, [initialLang, i18n]);

  // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ—Ñ–∏–ª—è
  useEffect(() => {
    if (profile && !formData.username) {
      setFormData({
        username: profile.username || '',
        email: profile.email || '',
        learningLanguage: profile.learningLanguage || '',
        nativeLanguage: profile.nativeLanguage || '',
        seeTranslate: profile.seeTranslate || false,
        dayWords: profile.dayWords || 20,
        avatar: profile.avatar || 'üòä',
      });
    }
  }, [profile, formData.username]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—è—Ö (username, etc.)
  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–ª—è—Ö –ø–∞—Ä–æ–ª—è
  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setPasswordData(prev => ({ ...prev, [name]: value }));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (Select)
  const handleSelectChange = (name: string, value: string | null) => {
    if (value) {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø—Ä–æ—Ñ–∏–ª–µ
  const handleSave = async () => {
    setSaving(true);
    try {
      await updateProfile({
        username: formData.username,
        email: formData.email,
        learningLanguage: formData.learningLanguage,
        nativeLanguage: formData.nativeLanguage,
        seeTranslate: formData.seeTranslate,
        avatar: formData.avatar,
      });

      // –ï—Å–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è —Ä–æ–¥–Ω–æ–π —è–∑—ã–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å—Ç–æ—Ä–µ
      if (formData.nativeLanguage) {
        const { setLanguage } = useLanguageStore.getState();
        setLanguage(formData.nativeLanguage);
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      await fetchProfile();
      setIsSuccessModalOpen(true);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
    } finally {
      setSaving(false);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
  const handlePasswordSave = async () => {
    setSaving(true);
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      if (passwordData.newPassword !== passwordData.confirmNewPassword) {
        console.error('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
        setSaving(false);
        return;
      }

      // –ó–∞–ø—Ä–æ—Å –Ω–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ $api
      await $api.post('/users/change-password', {
        currentPassword: passwordData.currentPassword,
        newPassword: passwordData.newPassword,
      });

      // –°–±—Ä–æ—Å –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã –ø–∞—Ä–æ–ª—è
      setPasswordData({ currentPassword: '', newPassword: '', confirmNewPassword: '' });
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      setIsPasswordModalOpen(false);
      setIsSuccessModalOpen(true);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:', err);
    } finally {
      setSaving(false);
    }
  };

  // –°–º–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∞ (emoji)
  const handleAvatarChange = (emoji: string) => {
    setFormData(prev => ({ ...prev, avatar: emoji }));
    setIsAvatarModalOpen(false);
  };

  return (
    <div className="h-[100%] dark:bg-[#121212] py-10 px-4">
      <div className="max-w-[540px] mx-auto rounded-[40px] shadow-0 p-8">
        <h1 className="text-2xl font-[600] mb-6 text-center dark:text-white">
          {t('profile.settings')}
        </h1>

        {/* –ê–≤–∞—Ç–∞—Ä */}
        <div className="flex justify-center mb-8">
          <div
            className="w-24 h-24 rounded-full bg-blue-500 flex items-center justify-center text-4xl cursor-pointer"
            onClick={() => setIsAvatarModalOpen(true)}
          >
            {formData.avatar}
          </div>
        </div>

        {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º email (–Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å) */}
        <div className="mb-4">
          <label className="block text-gray-700 dark:text-gray-300 text-sm font-bold mb-1">
            {t('signIn.emailLabel')}
          </label>
          <p className="text-[16px] text-gray-900 dark:text-white py-2 rounded-md">
            {formData.email}
          </p>
        </div>

        {/* –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <Input
          label={t('profile.username')}
          value={formData.username}
          onChange={handleInputChange}
          name="username"
          fullWidth
          clearable
          className="mb-4"
        />

        {/* –í—ã–±–æ—Ä –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞ */}
        {/* @ts-ignore */}
        {/* –í—ã–±–æ—Ä –∏–∑—É—á–∞–µ–º–æ–≥–æ —è–∑—ã–∫–∞ */}
        <Select
          label={t('profile.learningLanguage')}
          selectedKeys={new Set([formData.learningLanguage])}
          onSelectionChange={selected =>
            handleSelectChange('learningLanguage', Array.from(selected)[0] as string)
          }
          className="mb-4"
        >
          {Object.entries(learningLanguageMap).map(([code, label]) => (
            <SelectItem key={code} value={code}>
              {label}
            </SelectItem>
          ))}
        </Select>

        {/* –í—ã–±–æ—Ä —Ä–æ–¥–Ω–æ–≥–æ —è–∑—ã–∫–∞ */}
        <Select
          label={t('profile.nativeLanguage')}
          selectedKeys={new Set([formData.nativeLanguage])}
          onSelectionChange={selected =>
            handleSelectChange('nativeLanguage', Array.from(selected)[0] as string)
          }
          className="mb-4"
        >
          {Object.entries(nativeLanguageMap).map(([code, label]) => (
            <SelectItem key={code} value={code}>
              {label}
            </SelectItem>
          ))}
        </Select>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–æ—Ñ–∏–ª—è */}
        <div className="flex mt-4 justify-center">
          <Button
            color="success"
            onPress={handleSave}
            isLoading={saving}
            className="w-full bg-[#39B14C] text-white"
          >
            {t('profile.save')}
          </Button>
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–∫–∏ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è */}
        <div className="flex mt-4 justify-center">
          <Button
            color="primary"
            onPress={() => setIsPasswordModalOpen(true)}
            className="w-full bg-[#0070F3] text-white"
          >
            {t('forgotPassword.changePasswordButton')}
          </Button>
        </div>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è */}
        {/* @ts-ignore */}
        <Modal isOpen={isPasswordModalOpen} onOpenChange={setIsPasswordModalOpen}>
          {/* @ts-ignore */}
          <ModalContent>
            <ModalHeader className="text-xl font-bold">
              {t('forgotPassword.changePasswordButton')}
            </ModalHeader>
            <ModalBody>
              <Input
                label={t('change.currentPassword')}
                value={passwordData.currentPassword}
                onChange={handlePasswordChange}
                name="currentPassword"
                type="password"
                fullWidth
                className="mb-4"
              />
              <Input
                label={t('forgotPassword.enterNewPassword')}
                value={passwordData.newPassword}
                onChange={handlePasswordChange}
                name="newPassword"
                type="password"
                fullWidth
                className="mb-4"
              />
              <Input
                label={t('signUp.confirmPasswordPlaceholder')}
                value={passwordData.confirmNewPassword}
                onChange={handlePasswordChange}
                name="confirmNewPassword"
                type="password"
                fullWidth
                className="mb-4"
              />
            </ModalBody>
            <ModalFooter>
              <Button color="primary" onPress={handlePasswordSave} isLoading={saving}>
                {t('profile.save')}
              </Button>
              <Button color="danger" onPress={() => setIsPasswordModalOpen(false)}>
                {t('profile.close')}
              </Button>
            </ModalFooter>
          </ModalContent>
        </Modal>

        {/* –ú–æ–¥–∞–ª–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤–∞—Ç–∞—Ä–∞ */}
        {/* @ts-ignore */}
        <Modal isOpen={isAvatarModalOpen} onOpenChange={setIsAvatarModalOpen}>
          {/* @ts-ignore */}
          <ModalContent>
            <ModalHeader className="text-xl font-bold">
              {t('profile.selectAvatar')}
            </ModalHeader>
            <ModalBody className="flex flex-row flex-wrap justify-start gap-5">
              {emojis.map(emoji => (
                <div
                  key={emoji}
                  className="w-12 h-12 flex items-center justify-center text-2xl cursor-pointer bg-gray-100 rounded-full hover:bg-gray-200"
                  onClick={() => handleAvatarChange(emoji)}
                >
                  {emoji}
                </div>
              ))}
            </ModalBody>
            <ModalFooter>
              <Button color="danger" onPress={() => setIsAvatarModalOpen(false)}>
                {t('profile.close')}
              </Button>
            </ModalFooter>
          </ModalContent>
        </Modal>

        {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –ø–∞—Ä–æ–ª—å) */}
        {/* @ts-ignore */}
        <Modal isOpen={isSuccessModalOpen} onOpenChange={setIsSuccessModalOpen}>
          {/* @ts-ignore */}
          <ModalContent>
            <ModalHeader className="text-xl font-bold">
              {t('profile.success')}
            </ModalHeader>
            <ModalBody>
              <p>{t('profile.profileUpdated')}</p>
            </ModalBody>
            <ModalFooter>
              <Button color="success" onPress={() => setIsSuccessModalOpen(false)}>
                {t('profile.close')}
              </Button>
            </ModalFooter>
          </ModalContent>
        </Modal>
      </div>
    </div>
  );
};

export default EditProfilePage;
